def slackBuildNotification(String buildStatus) {
 
  // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESS'
   // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} \n Job Name: '${env.JOB_NAME} \n Build Number: [${env.BUILD_NUMBER}]' \n Build URL: (${env.BUILD_URL}) \n  }"
  
  
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}



node{
def maven = tool name: "maven3.8.4"

echo "The node is :  ${env.NODE_NAME}"
echo "The job name is :  ${env.JOB_NAME}"
echo "The build number is :  ${env.BUILD_NUMBER}"
echo "The workspace is :  ${env.WORKSPACE}"
buildName 'Dev -${BUILD_NUMBER}'
buildDescription 'pipelinescript-scripted way'


properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: '']])//checkout stage
properties([[$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])


try{

stage('checkout'){
git branch: 'development', credentialsId: '67257a1b-7645-4426-9719-c9cac7b2b419', url: 'https://github.com/NamaDeekshitha/maven-web-application.git'
}

//build stage
stage('build'){
sh "$maven/bin/mvn clean package"
}
 /*
 //generate sonarqube report
stage('sonarqube'){
sh "$maven/bin/mvn sonar:sonar"
}
stage('nexus'){
sh "$maven/bin/mvn deploy"
}
stage('tomcat'){
    sshagent(['25754f72-8d15-4459-9851-25b860ffa82d']) {
        sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@15.206.90.152:/opt/apache-tomcat-9.0.59/webapps"
    // some block
}
}
*/
}//tryblock closing

catch(e)
{
currentBuild.result = "FAILED"
}
finally{
sendslackBuildNotification(currentBuild.result)
}
}//node closing
